// Mocks generated by Mockito 5.4.2 from annotations
// in carg/test/widgets/belote_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i17;

import 'package:carg/models/carg_object.dart' as _i15;
import 'package:carg/models/game/belote.dart' as _i1;
import 'package:carg/models/game/game.dart' as _i9;
import 'package:carg/models/player.dart' as _i26;
import 'package:carg/models/players/belote_players.dart' as _i2;
import 'package:carg/models/players/players.dart' as _i10;
import 'package:carg/models/score/belote_score.dart' as _i5;
import 'package:carg/models/score/round/belote_round.dart' as _i6;
import 'package:carg/models/score/round/round.dart' as _i13;
import 'package:carg/models/score/score.dart' as _i12;
import 'package:carg/models/team.dart' as _i22;
import 'package:carg/repositories/base_repository.dart' as _i16;
import 'package:carg/repositories/game/abstract_belote_game_repository.dart'
    as _i4;
import 'package:carg/repositories/game/abstract_game_repository.dart' as _i11;
import 'package:carg/repositories/player/abstract_player_repository.dart'
    as _i23;
import 'package:carg/repositories/score/abstract_belote_score_repository.dart'
    as _i18;
import 'package:carg/repositories/score/abstract_score_repository.dart' as _i19;
import 'package:carg/repositories/team/abstract_team_repository.dart' as _i20;
import 'package:carg/services/game/abstract_belote_game_service.dart' as _i24;
import 'package:carg/services/player/abstract_player_service.dart' as _i21;
import 'package:carg/services/round/abstract_belote_round_service.dart' as _i27;
import 'package:carg/services/score/abstract_belote_score_service.dart' as _i7;
import 'package:carg/services/score/abstract_score_service.dart' as _i14;
import 'package:carg/services/team/abstract_team_service.dart' as _i8;
import 'package:mockito/mockito.dart' as _i3;
import 'package:mockito/src/dummies.dart' as _i25;

import 'belote_widget_test.dart' as _i28;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAbstractBeloteGameRepository_0<
        T1 extends _i1.Belote<_i2.BelotePlayers>> extends _i3.SmartFake
    implements _i4.AbstractBeloteGameRepository<T1> {
  _FakeAbstractBeloteGameRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAbstractBeloteScoreService_1<
        T1 extends _i5.BeloteScore<_i6.BeloteRound>> extends _i3.SmartFake
    implements _i7.AbstractBeloteScoreService<T1> {
  _FakeAbstractBeloteScoreService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAbstractTeamService_2 extends _i3.SmartFake
    implements _i8.AbstractTeamService {
  _FakeAbstractTeamService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAbstractGameRepository_3<T1 extends _i9.Game<_i10.Players>>
    extends _i3.SmartFake implements _i11.AbstractGameRepository<T1> {
  _FakeAbstractGameRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAbstractScoreService_4<T1 extends _i12.Score<_i13.Round>>
    extends _i3.SmartFake implements _i14.AbstractScoreService<T1> {
  _FakeAbstractScoreService_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseRepository_5<T1 extends _i15.CargObject> extends _i3.SmartFake
    implements _i16.BaseRepository<T1> {
  _FakeBaseRepository_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_6<T1> extends _i3.SmartFake implements _i17.Future<T1> {
  _FakeFuture_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAbstractBeloteScoreRepository_7<
        T1 extends _i5.BeloteScore<_i6.BeloteRound>> extends _i3.SmartFake
    implements _i18.AbstractBeloteScoreRepository<T1> {
  _FakeAbstractBeloteScoreRepository_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAbstractScoreRepository_8<T1 extends _i12.Score<_i13.Round>>
    extends _i3.SmartFake implements _i19.AbstractScoreRepository<T1> {
  _FakeAbstractScoreRepository_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAbstractTeamRepository_9 extends _i3.SmartFake
    implements _i20.AbstractTeamRepository {
  _FakeAbstractTeamRepository_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAbstractPlayerService_10 extends _i3.SmartFake
    implements _i21.AbstractPlayerService {
  _FakeAbstractPlayerService_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTeam_11 extends _i3.SmartFake implements _i22.Team {
  _FakeTeam_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAbstractPlayerRepository_12 extends _i3.SmartFake
    implements _i23.AbstractPlayerRepository {
  _FakeAbstractPlayerRepository_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AbstractBeloteGameService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbstractBeloteGameService<T extends _i1.Belote<_i2.BelotePlayers>,
        P extends _i5.BeloteScore<_i6.BeloteRound>> extends _i3.Mock
    implements _i24.AbstractBeloteGameService<T, P> {
  MockAbstractBeloteGameService() {
    _i3.throwOnMissingStub(this);
  }

  @override
  _i4.AbstractBeloteGameRepository<T> get beloteGameRepository =>
      (super.noSuchMethod(
        Invocation.getter(#beloteGameRepository),
        returnValue: _FakeAbstractBeloteGameRepository_0<T>(
          this,
          Invocation.getter(#beloteGameRepository),
        ),
      ) as _i4.AbstractBeloteGameRepository<T>);

  @override
  _i7.AbstractBeloteScoreService<P> get beloteScoreService =>
      (super.noSuchMethod(
        Invocation.getter(#beloteScoreService),
        returnValue: _FakeAbstractBeloteScoreService_1<P>(
          this,
          Invocation.getter(#beloteScoreService),
        ),
      ) as _i7.AbstractBeloteScoreService<P>);

  @override
  _i8.AbstractTeamService get teamService => (super.noSuchMethod(
        Invocation.getter(#teamService),
        returnValue: _FakeAbstractTeamService_2(
          this,
          Invocation.getter(#teamService),
        ),
      ) as _i8.AbstractTeamService);

  @override
  _i11.AbstractGameRepository<T> get gameRepository => (super.noSuchMethod(
        Invocation.getter(#gameRepository),
        returnValue: _FakeAbstractGameRepository_3<T>(
          this,
          Invocation.getter(#gameRepository),
        ),
      ) as _i11.AbstractGameRepository<T>);

  @override
  _i14.AbstractScoreService<P> get scoreService => (super.noSuchMethod(
        Invocation.getter(#scoreService),
        returnValue: _FakeAbstractScoreService_4<P>(
          this,
          Invocation.getter(#scoreService),
        ),
      ) as _i14.AbstractScoreService<P>);

  @override
  _i16.BaseRepository<T> get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBaseRepository_5<T>(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i16.BaseRepository<T>);

  @override
  _i17.Future<void> endAGame(
    T? game,
    DateTime? endingDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #endAGame,
          [
            game,
            endingDate,
          ],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<T> createGameWithPlayerList(
    List<String?>? playerListForOrder,
    List<String?>? playerListForTeam,
    DateTime? startingDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGameWithPlayerList,
          [
            playerListForOrder,
            playerListForTeam,
            startingDate,
          ],
        ),
        returnValue: _i25.ifNotNull(
              _i25.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #createGameWithPlayerList,
                  [
                    playerListForOrder,
                    playerListForTeam,
                    startingDate,
                  ],
                ),
              ),
              (T v) => _i17.Future<T>.value(v),
            ) ??
            _FakeFuture_6<T>(
              this,
              Invocation.method(
                #createGameWithPlayerList,
                [
                  playerListForOrder,
                  playerListForTeam,
                  startingDate,
                ],
              ),
            ),
      ) as _i17.Future<T>);

  @override
  _i17.Future<T> generateNewGame(
    _i22.Team? us,
    _i22.Team? them,
    List<String?>? playerListForOrder,
    DateTime? startingDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateNewGame,
          [
            us,
            them,
            playerListForOrder,
            startingDate,
          ],
        ),
        returnValue: _i25.ifNotNull(
              _i25.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #generateNewGame,
                  [
                    us,
                    them,
                    playerListForOrder,
                    startingDate,
                  ],
                ),
              ),
              (T v) => _i17.Future<T>.value(v),
            ) ??
            _FakeFuture_6<T>(
              this,
              Invocation.method(
                #generateNewGame,
                [
                  us,
                  them,
                  playerListForOrder,
                  startingDate,
                ],
              ),
            ),
      ) as _i17.Future<T>);

  @override
  _i17.Future<T?> getGame(String? gameId) => (super.noSuchMethod(
        Invocation.method(
          #getGame,
          [gameId],
        ),
        returnValue: _i17.Future<T?>.value(),
      ) as _i17.Future<T?>);

  @override
  _i17.Future<void> deleteGame(String? gameId) => (super.noSuchMethod(
        Invocation.method(
          #deleteGame,
          [gameId],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<List<T>> getAllGamesOfPlayerPaginated(
    String? playerId,
    int? pageSize,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllGamesOfPlayerPaginated,
          [
            playerId,
            pageSize,
          ],
        ),
        returnValue: _i17.Future<List<T>>.value(<T>[]),
      ) as _i17.Future<List<T>>);

  @override
  _i17.Future<String> create(T? t) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [t],
        ),
        returnValue: _i17.Future<String>.value(''),
      ) as _i17.Future<String>);

  @override
  _i17.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  void resetLastPointedDocument() => super.noSuchMethod(
        Invocation.method(
          #resetLastPointedDocument,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.Future<T?> get(String? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i17.Future<T?>.value(),
      ) as _i17.Future<T?>);

  @override
  _i17.Future<void> update(T? t) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [t],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);
}

/// A class which mocks [AbstractBeloteScoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbstractBeloteScoreService<T extends _i5.BeloteScore<_i6.BeloteRound>>
    extends _i3.Mock implements _i7.AbstractBeloteScoreService<T> {
  MockAbstractBeloteScoreService() {
    _i3.throwOnMissingStub(this);
  }

  @override
  _i18.AbstractBeloteScoreRepository<T> get beloteScoreRepository =>
      (super.noSuchMethod(
        Invocation.getter(#beloteScoreRepository),
        returnValue: _FakeAbstractBeloteScoreRepository_7<T>(
          this,
          Invocation.getter(#beloteScoreRepository),
        ),
      ) as _i18.AbstractBeloteScoreRepository<T>);

  @override
  _i19.AbstractScoreRepository<T> get scoreRepository => (super.noSuchMethod(
        Invocation.getter(#scoreRepository),
        returnValue: _FakeAbstractScoreRepository_8<T>(
          this,
          Invocation.getter(#scoreRepository),
        ),
      ) as _i19.AbstractScoreRepository<T>);

  @override
  _i16.BaseRepository<_i12.Score<_i13.Round>> get repository =>
      (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBaseRepository_5<_i12.Score<_i13.Round>>(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i16.BaseRepository<_i12.Score<_i13.Round>>);

  @override
  _i17.Future<T?> generateNewScore(String? gameId) => (super.noSuchMethod(
        Invocation.method(
          #generateNewScore,
          [gameId],
        ),
        returnValue: _i17.Future<T?>.value(),
      ) as _i17.Future<T?>);

  @override
  _i17.Future<T?> getScoreByGame(String? gameId) => (super.noSuchMethod(
        Invocation.method(
          #getScoreByGame,
          [gameId],
        ),
        returnValue: _i17.Future<T?>.value(),
      ) as _i17.Future<T?>);

  @override
  _i17.Stream<T?> getScoreByGameStream(String? gameId) => (super.noSuchMethod(
        Invocation.method(
          #getScoreByGameStream,
          [gameId],
        ),
        returnValue: _i17.Stream<T?>.empty(),
      ) as _i17.Stream<T?>);

  @override
  _i17.Future<void> deleteScoreByGame(String? gameId) => (super.noSuchMethod(
        Invocation.method(
          #deleteScoreByGame,
          [gameId],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  void resetLastPointedDocument() => super.noSuchMethod(
        Invocation.method(
          #resetLastPointedDocument,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.Future<_i12.Score<_i13.Round>?> get(String? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i17.Future<_i12.Score<_i13.Round>?>.value(),
      ) as _i17.Future<_i12.Score<_i13.Round>?>);

  @override
  _i17.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<void> update(_i12.Score<_i13.Round>? t) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [t],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<String> create(_i12.Score<_i13.Round>? t) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [t],
        ),
        returnValue: _i17.Future<String>.value(''),
      ) as _i17.Future<String>);
}

/// A class which mocks [AbstractTeamService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbstractTeamService extends _i3.Mock
    implements _i8.AbstractTeamService {
  MockAbstractTeamService() {
    _i3.throwOnMissingStub(this);
  }

  @override
  _i20.AbstractTeamRepository get teamRepository => (super.noSuchMethod(
        Invocation.getter(#teamRepository),
        returnValue: _FakeAbstractTeamRepository_9(
          this,
          Invocation.getter(#teamRepository),
        ),
      ) as _i20.AbstractTeamRepository);

  @override
  _i21.AbstractPlayerService get playerService => (super.noSuchMethod(
        Invocation.getter(#playerService),
        returnValue: _FakeAbstractPlayerService_10(
          this,
          Invocation.getter(#playerService),
        ),
      ) as _i21.AbstractPlayerService);

  @override
  _i16.BaseRepository<_i22.Team> get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBaseRepository_5<_i22.Team>(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i16.BaseRepository<_i22.Team>);

  @override
  _i17.Future<List<_i22.Team>> getAllTeamOfPlayer(
    String? playerId,
    int? pageSize,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTeamOfPlayer,
          [
            playerId,
            pageSize,
          ],
        ),
        returnValue: _i17.Future<List<_i22.Team>>.value(<_i22.Team>[]),
      ) as _i17.Future<List<_i22.Team>>);

  @override
  _i17.Future<_i22.Team> getTeamByPlayers(List<String?>? playerIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTeamByPlayers,
          [playerIds],
        ),
        returnValue: _i17.Future<_i22.Team>.value(_FakeTeam_11(
          this,
          Invocation.method(
            #getTeamByPlayers,
            [playerIds],
          ),
        )),
      ) as _i17.Future<_i22.Team>);

  @override
  _i17.Future<_i22.Team> incrementPlayedGamesByOne(
    String? id,
    _i9.Game<_i10.Players>? game,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #incrementPlayedGamesByOne,
          [
            id,
            game,
          ],
        ),
        returnValue: _i17.Future<_i22.Team>.value(_FakeTeam_11(
          this,
          Invocation.method(
            #incrementPlayedGamesByOne,
            [
              id,
              game,
            ],
          ),
        )),
      ) as _i17.Future<_i22.Team>);

  @override
  _i17.Future<_i22.Team> incrementWonGamesByOne(
    String? id,
    _i9.Game<_i10.Players>? game,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #incrementWonGamesByOne,
          [
            id,
            game,
          ],
        ),
        returnValue: _i17.Future<_i22.Team>.value(_FakeTeam_11(
          this,
          Invocation.method(
            #incrementWonGamesByOne,
            [
              id,
              game,
            ],
          ),
        )),
      ) as _i17.Future<_i22.Team>);

  @override
  void resetLastPointedDocument() => super.noSuchMethod(
        Invocation.method(
          #resetLastPointedDocument,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.Future<_i22.Team?> get(String? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i17.Future<_i22.Team?>.value(),
      ) as _i17.Future<_i22.Team?>);

  @override
  _i17.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<void> update(_i22.Team? t) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [t],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<String> create(_i22.Team? t) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [t],
        ),
        returnValue: _i17.Future<String>.value(''),
      ) as _i17.Future<String>);
}

/// A class which mocks [AbstractPlayerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbstractPlayerService extends _i3.Mock
    implements _i21.AbstractPlayerService {
  MockAbstractPlayerService() {
    _i3.throwOnMissingStub(this);
  }

  @override
  _i23.AbstractPlayerRepository get playerRepository => (super.noSuchMethod(
        Invocation.getter(#playerRepository),
        returnValue: _FakeAbstractPlayerRepository_12(
          this,
          Invocation.getter(#playerRepository),
        ),
      ) as _i23.AbstractPlayerRepository);

  @override
  _i16.BaseRepository<_i26.Player> get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBaseRepository_5<_i26.Player>(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i16.BaseRepository<_i26.Player>);

  @override
  _i17.Future<void> incrementPlayedGamesByOne(
    String? playerId,
    _i9.Game<_i10.Players>? game,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #incrementPlayedGamesByOne,
          [
            playerId,
            game,
          ],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<void> incrementWonGamesByOne(
    String? playerId,
    _i9.Game<_i10.Players>? game,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #incrementWonGamesByOne,
          [
            playerId,
            game,
          ],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<_i26.Player?> getPlayerOfUser(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlayerOfUser,
          [userId],
        ),
        returnValue: _i17.Future<_i26.Player?>.value(),
      ) as _i17.Future<_i26.Player?>);

  @override
  _i17.Future<List<_i26.Player>> searchPlayers({
    String? query = r'',
    _i26.Player? currentPlayer,
    bool? myPlayers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchPlayers,
          [],
          {
            #query: query,
            #currentPlayer: currentPlayer,
            #myPlayers: myPlayers,
          },
        ),
        returnValue: _i17.Future<List<_i26.Player>>.value(<_i26.Player>[]),
      ) as _i17.Future<List<_i26.Player>>);

  @override
  void resetLastPointedDocument() => super.noSuchMethod(
        Invocation.method(
          #resetLastPointedDocument,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.Future<_i26.Player?> get(String? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i17.Future<_i26.Player?>.value(),
      ) as _i17.Future<_i26.Player?>);

  @override
  _i17.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<void> update(_i26.Player? t) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [t],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<String> create(_i26.Player? t) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [t],
        ),
        returnValue: _i17.Future<String>.value(''),
      ) as _i17.Future<String>);
}

/// A class which mocks [AbstractBeloteRoundService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbstractBeloteRoundService<T extends _i6.BeloteRound,
        S extends _i5.BeloteScore<_i6.BeloteRound>> extends _i3.Mock
    implements _i27.AbstractBeloteRoundService<T, S> {
  MockAbstractBeloteRoundService() {
    _i3.throwOnMissingStub(this);
  }

  @override
  _i7.AbstractBeloteScoreService<S> get scoreService => (super.noSuchMethod(
        Invocation.getter(#scoreService),
        returnValue: _FakeAbstractBeloteScoreService_1<S>(
          this,
          Invocation.getter(#scoreService),
        ),
      ) as _i7.AbstractBeloteScoreService<S>);

  @override
  _i14.AbstractScoreService<S> get abstractScoreService => (super.noSuchMethod(
        Invocation.getter(#abstractScoreService),
        returnValue: _FakeAbstractScoreService_4<S>(
          this,
          Invocation.getter(#abstractScoreService),
        ),
      ) as _i14.AbstractScoreService<S>);

  @override
  _i17.Future<void> addRoundToGame(
    String? gameId,
    T? round,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addRoundToGame,
          [
            gameId,
            round,
          ],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  T getNewRound() => (super.noSuchMethod(
        Invocation.method(
          #getNewRound,
          [],
        ),
        returnValue: _i28.getNewRound(),
      ) as T);

  @override
  _i17.Future<void> editLastRoundOfScoreByGameId(
    String? gameId,
    T? round,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editLastRoundOfScoreByGameId,
          [
            gameId,
            round,
          ],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<void> deleteLastRoundOfScoreByGameId(String? gameId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteLastRoundOfScoreByGameId,
          [gameId],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);
}
